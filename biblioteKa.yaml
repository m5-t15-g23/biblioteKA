openapi: 3.0.3
info:
  title: biblioteKa
  version: 1.0.0
  description: A library API
paths:
  /api/books/:
    get:
      operationId: books_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - books
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedBookList"
          description: ""
    post:
      operationId: books_create
      tags:
        - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Book"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
          description: ""
  /api/copies/:
    get:
      operationId: copies_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - copies
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCopyList"
          description: ""
  /api/follow/:
    get:
      operationId: follow_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - follow
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedFollowerList"
          description: ""
    post:
      operationId: follow_create
      tags:
        - follow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Follower"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Follower"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Follower"
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Follower"
          description: ""
  /api/follow/{book_id}/:
    get:
      operationId: follow_list_2
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - follow
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedFollowerList"
          description: ""
    post:
      operationId: follow_create_2
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
      tags:
        - follow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Follower"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Follower"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Follower"
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Follower"
          description: ""
  /api/follow/colaborator/:
    get:
      operationId: follow_colaborator_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - follow
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedFollowerList"
          description: ""
  /api/loans/:
    get:
      operationId: loans_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - loans
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLoanList"
          description: ""
  /api/loans/{book_id}/:
    post:
      operationId: loans_create
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
      tags:
        - loans
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Loan"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Loan"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Loan"
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Loan"
          description: ""
  /api/loans/{loan_id}/checkout/:
    patch:
      operationId: loans_checkout_partial_update
      parameters:
        - in: path
          name: loan_id
          schema:
            type: integer
          required: true
      tags:
        - loans
      security:
        - jwtAuth: []
      responses:
        "200":
          description: No response body
  /api/loans/copy/{copy_id}/:
    get:
      operationId: loans_copy_list
      parameters:
        - in: path
          name: copy_id
          schema:
            type: integer
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - loans
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLoanList"
          description: ""
  /api/loans/student/{student_id}/:
    get:
      operationId: loans_student_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: path
          name: student_id
          schema:
            type: integer
          required: true
      tags:
        - loans
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLoanList"
          description: ""
  /api/unfollow/{book_id}/:
    delete:
      operationId: unfollow_destroy
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
      tags:
        - unfollow
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - users
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserList"
          description: ""
    post:
      operationId: users_create
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
  /api/users/{student_id}/:
    get:
      operationId: users_retrieve
      parameters:
        - in: path
          name: student_id
          schema:
            type: integer
          required: true
      tags:
        - users
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentStatus"
          description: ""
    put:
      operationId: users_update
      parameters:
        - in: path
          name: student_id
          schema:
            type: integer
          required: true
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentStatus"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/StudentStatus"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/StudentStatus"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentStatus"
          description: ""
    patch:
      operationId: users_partial_update
      parameters:
        - in: path
          name: student_id
          schema:
            type: integer
          required: true
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUser"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUser"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUser"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
  /api/users/login:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObtainPair"
          description: ""
  /api/users/login/refresh:
    post:
      operationId: users_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        author:
          type: string
          maxLength: 255
        description:
          type: string
        publication_year:
          type: string
          format: date-time
          nullable: true
        page_numbers:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        language:
          $ref: "#/components/schemas/LanguageEnum"
        genre:
          type: string
          maxLength: 255
        disponibility:
          type: boolean
          nullable: true
        copies_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          writeOnly: true
        user:
          type: array
          items:
            $ref: "#/components/schemas/User"
          readOnly: true
      required:
        - author
        - copies_number
        - description
        - genre
        - id
        - page_numbers
        - title
        - user
    Copy:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_avaliable:
          type: boolean
          nullable: true
        book:
          allOf:
            - $ref: "#/components/schemas/Book"
          readOnly: true
      required:
        - book
        - id
    Follower:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
          readOnly: true
        book_followed:
          type: integer
          readOnly: true
      required:
        - book_followed
        - id
        - student
    LanguageEnum:
      enum:
        - English
        - Portuguese
        - Spanish
        - French
        - Italian
        - German
        - Not Informed
      type: string
      description: |-
        * `English` - English
        * `Portuguese` - Portuguese
        * `Spanish` - Spanish
        * `French` - French
        * `Italian` - Italian
        * `German` - German
        * `Not Informed` - Notinformed
    Loan:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        loan_date:
          type: string
          format: date
          readOnly: true
        loan_return:
          type: string
          format: date
          readOnly: true
        is_active:
          type: boolean
          nullable: true
        returned_at:
          type: string
          format: date
          nullable: true
        user:
          allOf:
            - $ref: "#/components/schemas/User"
          readOnly: true
        copy:
          allOf:
            - $ref: "#/components/schemas/Copy"
          readOnly: true
      required:
        - copy
        - id
        - loan_date
        - loan_return
        - user
    PaginatedBookList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    PaginatedCopyList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Copy"
    PaginatedFollowerList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Follower"
    PaginatedLoanList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Loan"
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/User"
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        is_colaborator:
          type: boolean
          nullable: true
        status_for_loan:
          type: boolean
          nullable: true
    StudentStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          maxLength: 128
        is_colaborator:
          type: boolean
          nullable: true
        status_for_loan:
          type: boolean
          readOnly: true
          nullable: true
      required:
        - email
        - first_name
        - id
        - last_name
        - password
        - status_for_loan
        - username
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
        - access
        - password
        - refresh
        - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
        - access
        - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        is_colaborator:
          type: boolean
          nullable: true
        status_for_loan:
          type: boolean
          nullable: true
      required:
        - email
        - first_name
        - id
        - last_name
        - password
        - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
